import re

from telegram import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, Update, ReplyKeyboardRemove
from telegram.ext import ContextTypes

from actions import Action, StoryAction
from adapters.db import speech_styles
from adapters.story_generator import Story, StoryPersonal, StoryExpert, story_generator

personal_story_line = {
    1: "üéØ–í–æ–ø—Ä–æ—Å 1/7: –í —á–µ–º —Å—É—Ç—å —Ç–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–∏? –û–ø–∏—à–∏ —Å–∞–º—É—é –≥–ª–∞–≤–Ω—É—é —Å—É—Ç—å, –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º.\n–ù–∞–ø—Ä–∏–º–µ—Ä: –±–ª–æ–≥–µ—Ä –∫–∏–Ω—É–ª –º–µ–Ω—è –Ω–∞ –±–∞–±–∫–∏.",
    2: "‚è≥–í–æ–ø—Ä–æ—Å 2/7: –ö–∞–∫ –¥–∞–≤–Ω–æ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∏–ª–∏ –∫–∞–∫ –¥–∞–≤–Ω–æ —Ç—ã –æ–± —ç—Ç–æ–º –¥—É–º–∞–ª, –º–µ—á—Ç–∞–ª?\n–ù–∞–ø—Ä–∏–º–µ—Ä: –µ—â–µ —Å —Å–∞–º–æ–≥–æ –¥–µ—Ç—Å—Ç–≤–∞ —è —Ö–æ—Ç–µ–ª.., –ø–∞—Ä—É –Ω–µ–¥–µ–ª—å –Ω–∞–∑–∞–¥ –ø—Ä–æ–∏–∑–æ—à–ª–æ.., –±—É–∫–≤–∞–ª—å–Ω–æ –Ω–∞ –¥–Ω—è—Ö —è...",
    3: "üîç–í–æ–ø—Ä–æ—Å 3/7: –û–ø–∏—à–∏ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å–æ–±—ã—Ç–∏–π –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–≤–æ–¥—è—Ç –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏, —á—Ç–æ —Å–ø–æ–¥–≤–∏–≥–ª–æ —Ç–µ–±—è –∫ –∏—Å—Ç–æ—Ä–∏–∏, –ø–æ—á–µ–º—É –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞.\n–ù–∞–ø—Ä–∏–º–µ—Ä: —è –¥–æ–ª–≥–æ –º—É—á–∞–ª—Å—è –∏–ª–∏ –¥–æ–ª–≥–æ –∫ —ç—Ç–æ–º—É —à–µ–ª, –Ω–æ –≤ –æ–¥–∏–Ω –∏–∑ –¥–Ω–µ–π, –∏ –≤ –æ–¥–∏–Ω –∏–∑ –¥–Ω–µ–π —è –ø–æ–Ω—è–ª...",
    4: "üìñ–í–æ–ø—Ä–æ—Å 4/7: –†–∞—Å—Å–∫–∞–∂–∏ –æ—Å–Ω–æ–≤–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é, –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å –∏ –ø–æ–¥—Ä–æ–±–Ω–æ, —Å—Ç–∞—Ä–∞–π—Å—è –æ–ø–∏—Å—ã–≤–∞—Ç—å –≤—Å–µ —ç–º–æ—Ü–∏–∏ –∏ –¥–µ—Ç–∞–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤ —Ç–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–∏. –ß—Ç–æ –±—ã–ª–æ, –∫–∞–∫, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ.\n–ù–∞–ø—Ä–∏–º–µ—Ä: —è –ø–æ—à–µ–ª –≤ —ç—Ç–æ –ø–æ–º–µ—â–µ–Ω–∏–µ, –ø–æ—Å–º–æ—Ç—Ä–µ–ª —á—Ç–æ —Ç–∞–º –µ—Å—Ç—å, –ø–æ–Ω—è–ª, —á—Ç–æ –æ–Ω–æ –º–Ω–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, —Ç–∞–º –Ω–µ—Ç: (–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ), –∏ —è –ø–æ–Ω—è–ª, —á—Ç–æ –º–µ–Ω—è –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑–≤–µ–ª–∏ –Ω–∞ –±–∞–±–∫–∏.",
    5: "üîÑ–í–æ–ø—Ä–æ—Å 5/7: –†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø–æ—Å–ª–µ –∏—Å—Ç–æ—Ä–∏–∏, –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—Å–∞—Ç—å\n–ù–∞–ø—Ä–∏–º–µ—Ä: —è –≤—ã—Ö–æ–∂—É –∏–∑ –ø–æ–º–µ—â–µ–Ω–∏—è, –∑–≤–æ–Ω—é –¥—Ä—É–≥—É, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—é –ø—Ä–æ —Ç–æ —á—Ç–æ –º–µ–Ω—è –æ–±–º–∞–Ω—É–ª–∏, –º–µ–Ω—è –ø–æ–¥–¥–µ—Ä–∂–∞–ª–∏ –∏ —è –ø–æ–µ—Ö–∞–ª –¥–æ–º–æ–π.",
    6: "üîö–í–æ–ø—Ä–æ—Å 6/7: –û–ø–∏—à–∏, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ –∏—Ç–æ–≥—É, —Ç–µ–∑–∏—Å–Ω–æ –ø–æ–¥—ã—Ç–æ–∂–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é.\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ø–æ –∏—Ç–æ–≥—É: —è –ø–æ–Ω—è–ª, —á—Ç–æ –±–ª–æ–≥–µ—Ä –º–µ–Ω—è –∫–∏–Ω—É–ª, –ø–æ–º–µ—â–µ–Ω–∏–µ —è –Ω–µ –Ω–∞—à–µ, –Ω–æ –¥—Ä—É–∑—å—è –º–µ–Ω—è –ø–æ–¥–¥–µ—Ä–∂–∞–ª–∏.",
    7: "üí°–í–æ–ø—Ä–æ—Å 7/7: –ù–∞–ø–∏—à–∏ –≤—ã–≤–æ–¥ –∫–∞–∫–æ–π —Ç—ã –≤—ã–Ω–µ—Å –∏–ª–∏ –∫–∞–∫–æ–π –±—ã —Ö–æ—Ç–µ–ª —Å–∫–∞–∑–∞—Ç—å –ª—é–¥—è–º, —á—Ç–æ–±—ã –æ–Ω–∏ —Å–æ—á–ª–∏ —Ç–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª–µ–∑–Ω–æ–π\n–ù–∞–ø—Ä–∏–º–µ—Ä: –í—ã–≤–æ–¥ - –∫–∞–∫ –≥–æ–≤–æ—Ä–∏—Ç—Å—è —Å–∫—É–ø–æ–π –ø–ª–∞—Ç–∏—Ç –¥–≤–∞–∂–¥—ã, –Ω–µ —Å—Ç–æ–∏—Ç —ç–∫–æ–Ω–æ–º–∏—Ç—å –Ω–∞ —Å–µ–±–µ –∏ –¥–æ–≤–µ—Ä—è—Ç—å –±–ª–æ–≥–µ—Ä–∞–º.",
}
personal_story_line_text = """<b>–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—á–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏</b>

–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é –∏ —Ü–µ–ª–æ—Å—Ç–Ω—É—é —Å—é–∂–µ—Ç–Ω—É—é –ª–∏–Ω–∏—é –¥–ª—è —Ç–≤–æ–µ–≥–æ –≤–∏–¥–µ–æ, —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ 7 –≤–æ–ø—Ä–æ—Å–æ–≤. –ö–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –¥–µ—Ç–∞–ª—å–Ω–æ —Ä–∞—Å–∫—Ä—ã—Ç—å –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã —Ç–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–∏, –æ—Ç –≥–ª–∞–≤–Ω–æ–π –∏–¥–µ–∏ –¥–æ –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤. –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π –Ω–∏ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã —Ç–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –±—ã–ª–∞ –ø–æ–ª–Ω–æ–π –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –¥–ª—è –∑—Ä–∏—Ç–µ–ª–µ–π.
""" + f"\n\n{personal_story_line[1]}"

expert_story_line = {
    1: "üéØ–í–æ–ø—Ä–æ—Å 1/5: –ù–∞–ø–∏—à–∏ –æ —á–µ–º —Ç–≤–æ—è —Ç–µ–º–∞, —Å–∞–º–∞—è –≥–ª–∞–≤–Ω–∞—è –º—ã—Å–ª—å/—Ç–µ–º–∞, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –¥–æ–Ω–µ—Å—Ç–∏.\n–ù–∞–ø—Ä–∏–º–µ—Ä: —è —Ä–∞—Å—Å–∫–∞–∂—É –∫–∞–∫ –ø–æ—Ö—É–¥–µ—Ç—å –∑–∞ –º–µ—Å—è—Ü.  ",
    2: "üëÄ–í–æ–ø—Ä–æ—Å 2/5: –ù–∞–ø–∏—à–∏ –ø–æ—á–µ–º—É —á–µ–ª–æ–≤–µ–∫—É —Å—Ç–æ–∏—Ç —Å–º–æ—Ç—Ä–µ—Ç—å —ç—Ç–æ—Ç —Ä–æ–ª–∏–∫.\n–ù–∞–ø—Ä–∏–º–µ—Ä: —è –¥–∞—é –ø–æ–ª—å–∑—É –∏–ª–∏ –ª–∞–π—Ñ—Ö–∞–∫, —Ä–∞—Å—Å–∫–∞–∂—É —Å–µ–∫—Ä–µ—Ç.",
    3: "üåü–í–æ–ø—Ä–æ—Å 3/5: –†–∞—Å—Å–∫–∞–∂–∏ –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–æ–ª—å–∑—É, –ª–∞–π—Ñ—Ö–∞–∫, —Å–µ–∫—Ä–µ—Ç, –∏—Å—Ç–æ—Ä–∏—é.\n–ù–∞–ø—Ä–∏–º–µ—Ä: –≤—Å–µ–≥–æ –æ–¥–Ω–∞ —á–∞—à–∫–∞ —á–∞—è –≤ –¥–µ–Ω—å, –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Ö—É–¥–µ—Ç—å –Ω–∞ 2–∫–≥ –≤ –Ω–µ–¥–µ–ª—é",
    4: "‚è≥–í–æ–ø—Ä–æ—Å 4/5: –†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ø—Ä–æ–º–µ–∂–∫—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —á—Ç–æ –ø–æ–ª—É—á–∏–ª –∏–ª–∏ —á—Ç–æ –ø–æ–ª—É—á–∏—Ç —á–µ–ª–æ–≤–µ–∫.\n–ù–∞–ø—Ä–º–µ—Ä: –ø—Ä–∏–º–µ–Ω–∏–≤ —ç—Ç–æ—Ç —Å–µ–∫—Ä–µ—Ç, –≤—Å–µ–≥–æ –∑–∞ 2 –¥–Ω—è —è –ø–æ—Ö—É–¥–µ–ª. ",
    5: "üì¢–í–æ–ø—Ä–æ—Å 5/5: –†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ø–æ–ª—å–∑—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é, —Å –∫–æ—Ç–æ—Ä—ã–º –ª—é–¥—å –±—É–¥—É—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–¥–ø–∏—à–∏—Å—å, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å... –ø–æ—Å—Ç–∞–≤—å + –≤ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏—è –µ—Å–ª–∏ —Å–æ–ª–≥–ª–∞—Å–µ–Ω",
}
expert_story_line_text = """<b>C–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏</b>

–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –∏ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—É—é —Å—é–∂–µ—Ç–Ω—É—é –ª–∏–Ω–∏—é –¥–ª—è —Ç–≤–æ–µ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ, –æ—Ç–≤–µ—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ 5 –∫–ª—é—á–µ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. –≠—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ –∏ —è—Å–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–¥–µ–∏, –ª–∞–π—Ñ—Ö–∞–∫–∏ –∏ –ø–æ–ª—å–∑—É, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –¥–æ–Ω–µ—Å—Ç–∏ –¥–æ –∑—Ä–∏—Ç–µ–ª–µ–π. –û—Ç–≤–µ—Ç—ã –Ω–∞ —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã —Å—Ñ–æ—Ä–º–∏—Ä—É—é—Ç –æ—Å–Ω–æ–≤—É —Ç–≤–æ–µ–≥–æ –≤–∏–¥–µ–æ, –¥–µ–ª–∞—è –µ–≥–æ –Ω–µ —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º, –Ω–æ –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏.
""" + f"\n\n{expert_story_line[1]}"


# keyboard = InlineKeyboardMarkup([
#     [InlineKeyboardButton("–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data=Action.EDIT_PROFILE)],
#     [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–µ–π—Å—Ç–≤–∏—è", callback_data=Action.SELECT_ACTION)],
# ])


async def get_story_dictionary_from_text(story_text: str, story_line: dict) -> dict:
    # Split the text by number and dot
    split_text = re.split(r'(\d+\.)', story_text)

    # Remove empty strings and dots
    split_text = [item.strip() for item in split_text if item.strip() and item.strip() != '.']

    # Create dictionary
    d = {}
    for i in range(0, len(split_text), 2):
        key = int(split_text[i][:-1])  # remove the dot from the key
        value = split_text[i + 1]

        if key not in story_line:
            continue

        d[key] = value

    return d


async def create_story(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await dispatch_story_data(context)
    context.user_data['action'] = Action.CREATE_STORY

    reply_markup = ReplyKeyboardMarkup([
        ["–õ–∏—á–Ω–∞—è"],
        ["–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è"],
    ], one_time_keyboard=True, input_field_placeholder="–õ–∏—á–Ω–∞—è –∏–ª–∏ –≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è?")

    await update.message.reply_text("<b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏—Å—Ç–æ—Ä–∏–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏—Å—Ç–æ—Ä–∏–∏?", reply_markup=reply_markup)


async def set_story_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = update.message.text

    if message == '–õ–∏—á–Ω–∞—è':
        text = personal_story_line_text
    elif message == '–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è':
        text = expert_story_line_text
    else:
        reply_markup = ReplyKeyboardMarkup([
            ["–õ–∏—á–Ω–∞—è"],
            ["–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è"],
        ], one_time_keyboard=True, input_field_placeholder="–õ–∏—á–Ω–∞—è –∏–ª–∏ –≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è?")

        await update.message.reply_text(
            '–¢–∏–ø –∏—Å—Ç–æ—Ä–∏–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–∏–±–æ –õ–∏—á–Ω–∞—è, –ª–∏–±–æ –≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è',
            reply_markup=reply_markup
        )
        return

    context.user_data['story_type'] = message
    context.user_data['action'] = StoryAction.SET_STORY_LINE
    context.user_data['story_part_index'] = 1
    context.user_data['story_line'] = {}

    await update.message.reply_text(
        text,
        reply_markup=ReplyKeyboardRemove(),
    )


async def set_story_line(update: Update, context: ContextTypes.DEFAULT_TYPE):
    story_text = update.message.text
    speech_style_names = [speech_styles[speech_style_index]['name'].lower() for speech_style_index in
                          context.user_data['author'].preferred_speech_styles]

    # Create story line
    story: Story
    if context.user_data['story_type'] == Story.PERSONAL:
        story_line = personal_story_line
        story_dict = await get_story_dictionary_from_text(story_text, story_line)
        if 'story_line' in context.user_data:
            context.user_data['story_line'].update(story_dict)
        else:
            context.user_data['story_line'] = story_dict

        story = StoryPersonal(
            clickbait_event=context.user_data['story_line'].get(1),
            plot_start=context.user_data['story_line'].get(2),
            plot_development=context.user_data['story_line'].get(3),
            storytelling=context.user_data['story_line'].get(4),
            plot_continuation=context.user_data['story_line'].get(5),
            intermediate_results=context.user_data['story_line'].get(6),
            conclusion=context.user_data['story_line'].get(7),
            speech_style_names=speech_style_names
        )
    else:
        story_line = expert_story_line
        story_dict = await get_story_dictionary_from_text(story_text, story_line)
        if 'story_line' in context.user_data:
            context.user_data['story_line'].update(story_dict)
        else:
            context.user_data['story_line'] = story_dict

        story = StoryExpert(
            hook=context.user_data['story_line'].get(1),
            reengagement=context.user_data['story_line'].get(2),
            plot_establishment=context.user_data['story_line'].get(3),
            climax=context.user_data['story_line'].get(4),
            resolution=context.user_data['story_line'].get(5),
            speech_style_names=speech_style_names
        )

    # Check if story line is valid
    absent_story_line_text = []
    for key in story_line.keys():
        if key not in context.user_data['story_line']:
            absent_story_line_text.append(f"{key}. {story_line[key]}")

    if absent_story_line_text:
        absent_story_line_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø—É–Ω–∫—Ç—ã:\n\n" + "\n".join(absent_story_line_text)
        await update.message.reply_text(await story.get_story_line_text())
        await update.message.reply_text(absent_story_line_text)
        return
    else:
        await show_story_line_with_buttons(update, context)


async def show_story_line_with_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['action'] = StoryAction.SHOW_STORY_LINE
    speech_style_names = [speech_styles[speech_style_index]['name'].lower() for speech_style_index in
                          context.user_data['author'].preferred_speech_styles]

    # Create story line
    story: Story
    if context.user_data['story_type'] == Story.PERSONAL:
        story = StoryPersonal(
            clickbait_event=context.user_data['story_line'].get(1),
            plot_start=context.user_data['story_line'].get(2),
            plot_development=context.user_data['story_line'].get(3),
            storytelling=context.user_data['story_line'].get(4),
            plot_continuation=context.user_data['story_line'].get(5),
            intermediate_results=context.user_data['story_line'].get(6),
            conclusion=context.user_data['story_line'].get(7),
            speech_style_names=speech_style_names
        )
    else:
        story = StoryExpert(
            hook=context.user_data['story_line'].get(1),
            reengagement=context.user_data['story_line'].get(2),
            plot_establishment=context.user_data['story_line'].get(3),
            climax=context.user_data['story_line'].get(4),
            resolution=context.user_data['story_line'].get(5),
            speech_style_names=speech_style_names
        )

    reply_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data=StoryAction.REGEN)],
        [InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é", callback_data=StoryAction.EDIT_STORY_LINE)],
    ])
    last_message = await update.message.reply_text(await story.get_story_line_text(), reply_markup=reply_markup)
    context.user_data['last_message'] = {
        'chat_id': last_message.chat_id,
        'message_id': last_message.message_id,
    }


async def show_story_line(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['action'] = StoryAction.SHOW_STORY_LINE
    speech_style_names = [speech_styles[speech_style_index]['name'].lower() for speech_style_index in
                          context.user_data['author'].preferred_speech_styles]

    # Create story line
    story: Story
    if context.user_data['story_type'] == Story.PERSONAL:
        story = StoryPersonal(
            clickbait_event=context.user_data['story_line'].get(1),
            plot_start=context.user_data['story_line'].get(2),
            plot_development=context.user_data['story_line'].get(3),
            storytelling=context.user_data['story_line'].get(4),
            plot_continuation=context.user_data['story_line'].get(5),
            intermediate_results=context.user_data['story_line'].get(6),
            conclusion=context.user_data['story_line'].get(7),
            speech_style_names=speech_style_names
        )
    else:
        story = StoryExpert(
            hook=context.user_data['story_line'].get(1),
            reengagement=context.user_data['story_line'].get(2),
            plot_establishment=context.user_data['story_line'].get(3),
            climax=context.user_data['story_line'].get(4),
            resolution=context.user_data['story_line'].get(5),
            speech_style_names=speech_style_names
        )

    await update.callback_query.message.reply_text(await story.get_story_line_text())


async def set_story_line_part(update: Update, context: ContextTypes.DEFAULT_TYPE):
    story_line_part = update.message.text
    story_type = context.user_data['story_type']
    story_part_index = context.user_data['story_part_index']

    if story_type == Story.PERSONAL:
        story_line = personal_story_line
        text = "<b>–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—á–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏</b>\n\n"
    else:
        story_line = expert_story_line
        text = "<b>–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏</b>\n\n"

    context.user_data['story_line'][story_part_index] = story_line_part

    if story_part_index < len(story_line):
        text += story_line[story_part_index + 1]
        context.user_data['story_part_index'] = story_part_index + 1
        await update.message.reply_text(text)
    else:
        await show_story_line_with_buttons(update, context)


async def generate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'story_line' not in context.user_data:
        await update.callback_query.edit_message_reply_markup(reply_markup=None)
        return

    response_message = await update.callback_query.message.reply_text("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é üîÆ")

    story: Story
    speech_style_names = [speech_styles[speech_style_index]['name'].lower() for speech_style_index in
                          context.user_data['author'].preferred_speech_styles]
    if context.user_data['story_type'] == Story.PERSONAL:
        story = StoryPersonal(
            clickbait_event=context.user_data['story_line'].get(1),
            plot_start=context.user_data['story_line'].get(2),
            plot_development=context.user_data['story_line'].get(3),
            storytelling=context.user_data['story_line'].get(4),
            plot_continuation=context.user_data['story_line'].get(5),
            intermediate_results=context.user_data['story_line'].get(6),
            conclusion=context.user_data['story_line'].get(7),
            speech_style_names=speech_style_names
        )
    else:
        story = StoryExpert(
            hook=context.user_data['story_line'].get(1),
            reengagement=context.user_data['story_line'].get(2),
            plot_establishment=context.user_data['story_line'].get(3),
            climax=context.user_data['story_line'].get(4),
            resolution=context.user_data['story_line'].get(5),
            speech_style_names=speech_style_names
        )

    # Generate story
    generated_story = await story_generator.generate(story)
    generated_title = await story_generator.generate_title(story, generated_story)

    response_text = f"<b>{generated_title}</b>\n\n{generated_story}"
    reply_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü–µ—Ä–µ–≥–µ–Ω–∏—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data=StoryAction.REGEN)],
        [InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é", callback_data=StoryAction.SHOW_EDIT_STORY_LINE)],
        [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å üü¢", callback_data=StoryAction.END)],
    ])

    last_message = await context.bot.edit_message_text(
        chat_id=response_message.chat_id,
        message_id=response_message.message_id,
        text=response_text,
        reply_markup=reply_markup,
    )
    context.user_data['last_message'] = {
        'chat_id': last_message.chat_id,
        'message_id': last_message.message_id,
    }

    await update.callback_query.edit_message_reply_markup(reply_markup=None)


async def show_edit_story_line(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'story_line' not in context.user_data:
        await update.callback_query.edit_message_reply_markup(reply_markup=None)
        return

    await show_story_line(update, context)
    await edit_story_line(update, context)


async def edit_story_line(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'story_line' not in context.user_data:
        await update.callback_query.edit_message_reply_markup(reply_markup=None)
        return

    context.user_data['action'] = StoryAction.EDIT_STORY_LINE

    message = """–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—é–∂–µ—Ç–Ω–æ–π –ª–∏–Ω–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –ø—É–Ω–∫—Ç –∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n1. –ë–ª–æ–≥–µ—Ä –∫–∏–Ω—É–ª –º–µ–Ω—è –Ω–∞ –±–∞–±–∫–∏.\n2. E—â–µ —Å —Å–∞–º–æ–≥–æ –¥–µ—Ç—Å—Ç–≤–∞ —è —Ö–æ—Ç–µ–ª..."""
    await update.callback_query.message.reply_text(message)
    await update.callback_query.edit_message_reply_markup(reply_markup=None)


async def dispatch_story_data(context: ContextTypes.DEFAULT_TYPE):
    if 'action' in context.user_data:
        del context.user_data['action']
    if 'story_type' in context.user_data:
        del context.user_data['story_type']
    if 'story_part_index' in context.user_data:
        del context.user_data['story_part_index']
    if 'story_line' in context.user_data:
        del context.user_data['story_line']
    if 'last_message' in context.user_data:
        await context.bot.edit_message_reply_markup(
            chat_id=context.user_data['last_message']['chat_id'],
            message_id=context.user_data['last_message']['message_id'],
            reply_markup=None,
        )

        del context.user_data['last_message']


async def cancel_story_generation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await dispatch_story_data(context)
    await update.message.reply_text("–°–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –±—ã–ª–æ –ø—Ä–µ—Ä–≤–∞–Ω–æ üìùüî•")


async def end_story_generation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await dispatch_story_data(context)
    await update.callback_query.message.reply_text("""–í–æ—Ç –∏ –≤—Å—ë! üåü –¢–≤–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤. –ù–∞–¥–µ—é—Å—å, —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç. üé¨

–ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –¥–µ—Ç–∞–ª–∏ –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–¥ —Å–≤–æ–π —Å—Ç–∏–ª—å, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ. –ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –µ—â—ë –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /start –∏ —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º. üñãÔ∏è

–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª InstaIdeas –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞! –ñ–¥—É —Ç–µ–±—è —Å–Ω–æ–≤–∞, —á—Ç–æ–±—ã –≤–º–µ—Å—Ç–µ —Ç–≤–æ—Ä–∏—Ç—å —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏! ‚ú®
""")
