from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes

from actions import ProfileAction, Action
from adapters.db import Author, speech_styles

keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton("–£–∫–∞–∑–∞—Ç—å –ø–æ–ª", callback_data=ProfileAction.EDIT_GENDER)],
    [InlineKeyboardButton("–£–∫–∞–∑–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç", callback_data=ProfileAction.EDIT_AGE)],
    [InlineKeyboardButton("–£–∫–∞–∑–∞—Ç—å —Å—Ç–∏–ª–∏ —Ä–µ—á–∏", callback_data=ProfileAction.EDIT_SPEECH_STYLE)],
    [InlineKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è üü¢", callback_data=ProfileAction.SAVE)],
])


async def get_text(author: Author):
    if not author.has_info():
        return "<b>–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n–í —ç—Ç–æ–º –º–µ—Å—Ç–µ –±—É–¥–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è."

    text = "<b>–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
    if author.gender:
        text += f"–ü–æ–ª: {author.gender}\n"
    else:
        text += "–ü–æ–ª: –Ω–µ —É–∫–∞–∑–∞–Ω–æ\n"

    if author.age:
        text += f"–í–æ–∑—Ä–∞—Å—Ç: {author.age}\n"
    else:
        text += "–í–æ–∑—Ä–∞—Å—Ç: –Ω–µ —É–∫–∞–∑–∞–Ω–æ\n"

    if author.preferred_speech_styles:
        text += f"–°—Ç–∏–ª–∏ —Ä–µ—á–∏: {', '.join([speech_styles[i]['name'] for i in author.preferred_speech_styles])}\n"
    else:
        text += "–°—Ç–∏–ª–∏ —Ä–µ—á–∏: –Ω–µ —É–∫–∞–∑–∞–Ω–æ\n"

    return text


async def get_speech_styles_text(selected_speech_styles: list[int]) -> str:
    preferred_style_text = "\n".join([
        f"{key}. {value['name']}{' (–í—ã–±—Ä–∞–Ω)' if key in selected_speech_styles else ''}: {value['link']}"
        for key, value
        in speech_styles.items()
    ])

    first_preferred_style_text = """<b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π —Å—Ç–∏–ª—å –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö Reels –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ:

""" + preferred_style_text

    return first_preferred_style_text


async def edit_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data['action'] = Action.EDIT_PROFILE
    author = context.user_data['author']

    if update.callback_query:
        await update.callback_query.edit_message_text(
            await get_text(author),
            reply_markup=keyboard,
        )
    else:
        await update.message.reply_text(
            await get_text(author),
            reply_markup=keyboard
        )


async def edit_gender(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data['action'] = ProfileAction.EDIT_GENDER

    reply_markup = ReplyKeyboardMarkup([
        ["–ú", "–ñ"],
    ], one_time_keyboard=True, input_field_placeholder="–ú—É–∂—á–∏–Ω–∞ –∏–ª–∏ –ñ–µ–Ω—â–∏–Ω–∞?")

    await update.callback_query.answer()
    await update.callback_query.message.reply_text("<b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</b>\n\n–ö–∞–∫–æ–π —É –≤–∞—Å –ø–æ–ª?", reply_markup=reply_markup)


async def edit_age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data['action'] = ProfileAction.EDIT_AGE
    await update.callback_query.answer()
    await update.callback_query.message.reply_text("<b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</b>\n\n–ö–∞–∫–æ–π —É –≤–∞—Å –≤–æ–∑—Ä–∞—Å—Ç?")


async def edit_speech_styles(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data['action'] = ProfileAction.EDIT_SPEECH_STYLE

    keyboard = [
        [
            InlineKeyboardButton(
                value['name'] + " ‚úÖ" if key in context.user_data['author'].preferred_speech_styles else
                value['name'], callback_data=key)
        ] for key, value in speech_styles.items()
    ]
    keyboard.append([InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å üü¢", callback_data=Action.EDIT_PROFILE)])
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = await get_speech_styles_text(context.user_data['author'].preferred_speech_styles)

    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        text,
        reply_markup=reply_markup
    )


async def save_author_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.callback_query.answer()
    await update.callback_query.edit_message_text()

    del context.user_data['action']
